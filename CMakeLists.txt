# Setup the minimum version required of CMake to generate the Makefil
cmake_minimum_required (VERSION 2.8)

# Raises a FATA_ERROR if version < 2.8
cmake_minimum_required (VERSION 2.8 FATAL_ERROR)

# We setup the name for our project. After we do that, this will change some
# directories naming convention generated by CMake. We can send the LANG of
# code as second param
project (myengine CXX)

# Set the project source dir (just convention)
set(MYENGINE_CMAKE_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR})
set(MYENGINE_CMAKE_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR})

# It's useful to setup the current version of our code in the build system
# using a 'semver' style
set(MYENGINE_CMAKE_VERSION_MAJOR 0)
set(MYENGINE_CMAKE_VERSION_MINOR 1)
set(MYENGINE_CMAKE_VERSION_PATCH 0)

# Send the variables (version number) to source code header
#configure_file (
#)

# Include Directories
# In GCC, this will invoke the '-I' command
include_directories(include)

# Where are the additional libraries installed? Note: provide includes
# path here, subsequent checks will resolve everything else
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/CMake/modules/")

# Setup the list of source files
set(MYENGINE_CMAKE_SOURCES
  src/BaseAnimation.cpp
  src/BaseEntity.cpp
  src/Character.cpp
  src/DirectionalAnimation.cpp
  src/Enemy.cpp
  src/EntityManager.cpp
  src/EventManager.cpp
  src/Game.cpp
  src/main.cpp
  src/Map.cpp
  src/Player.cpp
  src/SpriteSheet.cpp
  src/State_Game.cpp
  src/State_GameOver.cpp
  src/State_Intro.cpp
  src/State_MainMenu.cpp
  src/StateManager.cpp
  src/State_Pause.cpp
  src/Window.cpp
)

#set(SFML_STATIC_LIBRARIES TRUE)

find_package(SFML 2.5 COMPONENTS graphics audio REQUIRED)

# Calls the compiler
add_executable(${PROJECT_NAME} ${MYENGINE_CMAKE_SOURCES})

# Link the libraries
target_link_libraries(${PROJECT_NAME} ${LIBS} m sfml-graphics sfml-audio)

# Where are the additional libraries installed? Note: provide includes
# path here, subsequent checks will resolve everything else
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/CMake/modules/")

# Compiler Condition (gcc ; g++)
if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
  message(STATUS "Setting the flags for ${CMAKE_CXX_COMPILER_ID} compiler")
  add_definitions(--std=c++17)
endif()

# Check for OS
if(UNIX)
  set(MYENGINE_CMAKE_DEFINITIONS
    "${MYENGINE_CMAKE_DEFINIONS} -Wall -Wextra -Werror -Wno-deprecated-declarations -Wno-unused-parameter -Wno-comment")
endif()
